<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<!-- namespace 用来定位具体是哪一个mapper文件的东西，不能与其他mapper的namespace重复 -->
<!-- <mapper namespace="hhh"> -->
<mapper namespace="com.zhiyou.dao.UserDao">
<cache type="com.zhiyou.redis.RedisCache"/>
	<!-- id: 用来配合namespace定位SQL语句，在同一个mapper中不能重复 resultType: 用来指定查询语句的结果集类型，如果查询出来是多条记录会自动包装为对应的list集合 
		,要求model类的属性名必须与数据库的列名一致 （同名匹配原则） resultMap: 当数据库列名与model类中属性名不一致的时候，查询语句可以使用resultMap来自定义返回结果集，在其中指定数据库中的列对应于model类的哪一属性 
		parameterType: 用来指定当前SQL中需要使用的参数类型，如果传入的是model在SQL中就可以使用#{属性名}来进行取值操作，如果传入的是一个字符串或者基本数据类型， 
		可以使用#{任意字符}来进行取值，一般情况下我们可以默认省略掉参数类型，但是开发中建议不要省略。 -->
	<insert id="add" parameterType="user">
		insert into user
		values(#{id},#{username},#{password},#{qian},#{date})
	</insert>

	<delete id="delete" parameterType="int">
		delete from user where
		id=#{id};
	</delete>


	<update id="update" parameterType="user">
		update user
		<set>
			<if test="username!=null">
				name=#{username},
			</if>
			<if test="password!=null">
				password=#{password},
			</if>
			<if test="qian!=null">
				qian=#{qian},
			</if>
		</set>
		<where>
			id=#{id}
		</where>

	</update>
	

	<resultMap type="user" id="userMap">
		<id column="id" property="id" />
		<result column="name" property="username" />
		<result column="password" property="password" />
		<result column="qian" property="qian" />
		<result column="date" property="date" />
	</resultMap>

	<select id="selectAll" resultMap="userMap">
		select * from user
	</select>

	
	<select id="selectByID" resultMap="userMap">
		select * from user where id=#{id}
	</select>

</mapper>


